package main

import (
	"fmt"
	"github.com/gorilla/sessions"
	"html/template"
	"log"
	"net/http"
	"os"
	"path/filepath"
)

var tpl *template.Template
var store = sessions.NewCookieStore([]byte("super-secret-key"))

type statusRecorder struct {
	http.ResponseWriter
	status int
}

func (rec *statusRecorder) WriteHeader(code int) {
	rec.status = code
	rec.ResponseWriter.WriteHeader(code)
}

func init() {
	files, err := filepath.Glob("pages/*.html")
	if err != nil {
		log.Fatal(err)
	}

	if len(files) == 0 {
		log.Fatal("No HTML files found in pages directory")
	}

	tpl = template.Must(template.ParseFiles(files...))

	store.Options = &sessions.Options{
		Path:     "/",
		MaxAge:   31536000, // –∫—É–∫–∞ –∂–∏–≤—ë—Ç 100 —á–∞—Å
		HttpOnly: true,     // –Ω–µ–ª—å–∑—è —á–∏—Ç–∞—Ç—å –∫—É–∫—É –∏–∑ JS
		Secure:   false,    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û false –¥–ª—è HTTP
	}
}

func existsFile(path string) bool {
	_, err := os.Stat(path)
	return !os.IsNotExist(err)
}

func indexHandler(w http.ResponseWriter, r *http.Request) {
	session, _ := store.Get(r, "session")

	isLoggedIn := session.Values["username"] != nil

	data := map[string]interface{}{
		"isLoggedIn": isLoggedIn,                 // –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏
		"username":   session.Values["username"], // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		"rules":      session.Values["rules"],    // –†–æ–ª–∏
	}

	err := tpl.ExecuteTemplate(w, "index.html", data)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", http.StatusInternalServerError)
	}
}

func notFoundPage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotFound)

	// –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
	data := struct {
		URL string
	}{
		URL: r.URL.Path,
	}

	// —Ä–µ–Ω–¥–µ—Ä–∏–º –∏–º–µ–Ω–Ω–æ 404.html
	err := tpl.ExecuteTemplate(w, "404.html", data)
	if err != nil {
		// –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É–ø–∞–ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 404", http.StatusInternalServerError)
	}
}

func forbiddenHandler(w http.ResponseWriter, r *http.Request) {
	err := tpl.ExecuteTemplate(w, "403.html", nil)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", http.StatusInternalServerError)
	}
}

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "3000"
	}

	mux := http.NewServeMux()

	fs := http.FileServer(http.Dir("assets"))
	mux.Handle("/assets/", http.StripPrefix("/assets/", fs))

	fmt.Println("Server starting on", port)

	mux.HandleFunc("/", indexHandler)
	mux.HandleFunc("/forbidden", forbiddenHandler)

	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		h, pattern := mux.Handler(r)

		switch {
		case pattern == "":
			// –ù–∏ –æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª
			notFoundPage(w, r)
			return
		case pattern == "/" && r.URL.Path != "/":
			// –ï—Å–ª–∏ –±—ã –º—ã –ª–æ–≤–∏–ª–∏ "/" ‚Äî –∞ —ç—Ç–æ –Ω–µ /
			notFoundPage(w, r)
			return
		default:
			// –í—Å—ë –æ–∫ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
			h.ServeHTTP(w, r)
		}
	})

	log.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", port)
	log.Fatal(http.ListenAndServe(":"+port, handler))
}
